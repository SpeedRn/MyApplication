package com.stv.launcher.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.stv.launcher.db.ShortcutInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SHORTCUT_INFO.
*/
public class ShortcutInfoDao extends AbstractDao<ShortcutInfo, Long> {

    public static final String TABLENAME = "SHORTCUT_INFO";

    /**
     * Properties of entity ShortcutInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Index = new Property(1, Integer.class, "index", false, "INDEX");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property SpanX = new Property(3, Integer.class, "spanX", false, "SPAN_X");
        public final static Property SpanY = new Property(4, Integer.class, "spanY", false, "SPAN_Y");
        public final static Property Row = new Property(5, Integer.class, "row", false, "ROW");
        public final static Property Column = new Property(6, Integer.class, "column", false, "COLUMN");
        public final static Property Width = new Property(7, Integer.class, "width", false, "WIDTH");
        public final static Property Height = new Property(8, Integer.class, "height", false, "HEIGHT");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(10, String.class, "description", false, "DESCRIPTION");
        public final static Property PackageName = new Property(11, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property ClassName = new Property(12, String.class, "className", false, "CLASS_NAME");
        public final static Property Flags = new Property(13, Integer.class, "flags", false, "FLAGS");
        public final static Property Container = new Property(14, Long.class, "container", false, "CONTAINER");
        public final static Property ContainerName = new Property(15, String.class, "containerName", false, "CONTAINER_NAME");
        public final static Property InstallTime = new Property(16, Long.class, "installTime", false, "INSTALL_TIME");
        public final static Property ComponentNameStr = new Property(17, String.class, "componentNameStr", false, "COMPONENT_NAME_STR");
        public final static Property IconUrl = new Property(18, String.class, "iconUrl", false, "ICON_URL");
        public final static Property BackgroundResID = new Property(19, Integer.class, "backgroundResID", false, "BACKGROUND_RES_ID");
        public final static Property InFolderIndex = new Property(20, Integer.class, "inFolderIndex", false, "IN_FOLDER_INDEX");
        public final static Property Reserve1 = new Property(21, String.class, "reserve1", false, "RESERVE1");
        public final static Property Reserve2 = new Property(22, String.class, "reserve2", false, "RESERVE2");
        public final static Property Reserve3 = new Property(23, String.class, "reserve3", false, "RESERVE3");
    };


    public ShortcutInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ShortcutInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SHORTCUT_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'INDEX' INTEGER," + // 1: index
                "'TYPE' INTEGER," + // 2: type
                "'SPAN_X' INTEGER," + // 3: spanX
                "'SPAN_Y' INTEGER," + // 4: spanY
                "'ROW' INTEGER," + // 5: row
                "'COLUMN' INTEGER," + // 6: column
                "'WIDTH' INTEGER," + // 7: width
                "'HEIGHT' INTEGER," + // 8: height
                "'TITLE' TEXT," + // 9: title
                "'DESCRIPTION' TEXT," + // 10: description
                "'PACKAGE_NAME' TEXT," + // 11: packageName
                "'CLASS_NAME' TEXT," + // 12: className
                "'FLAGS' INTEGER," + // 13: flags
                "'CONTAINER' INTEGER," + // 14: container
                "'CONTAINER_NAME' TEXT," + // 15: containerName
                "'INSTALL_TIME' INTEGER," + // 16: installTime
                "'COMPONENT_NAME_STR' TEXT," + // 17: componentNameStr
                "'ICON_URL' TEXT," + // 18: iconUrl
                "'BACKGROUND_RES_ID' INTEGER," + // 19: backgroundResID
                "'IN_FOLDER_INDEX' INTEGER," + // 20: inFolderIndex
                "'RESERVE1' TEXT," + // 21: reserve1
                "'RESERVE2' TEXT," + // 22: reserve2
                "'RESERVE3' TEXT);"); // 23: reserve3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SHORTCUT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ShortcutInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(2, index);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        Integer spanX = entity.getSpanX();
        if (spanX != null) {
            stmt.bindLong(4, spanX);
        }
 
        Integer spanY = entity.getSpanY();
        if (spanY != null) {
            stmt.bindLong(5, spanY);
        }
 
        Integer row = entity.getRow();
        if (row != null) {
            stmt.bindLong(6, row);
        }
 
        Integer column = entity.getColumn();
        if (column != null) {
            stmt.bindLong(7, column);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(8, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(9, height);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(11, description);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(12, packageName);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(13, className);
        }
 
        Integer flags = entity.getFlags();
        if (flags != null) {
            stmt.bindLong(14, flags);
        }
 
        Long container = entity.getContainer();
        if (container != null) {
            stmt.bindLong(15, container);
        }
 
        String containerName = entity.getContainerName();
        if (containerName != null) {
            stmt.bindString(16, containerName);
        }
 
        Long installTime = entity.getInstallTime();
        if (installTime != null) {
            stmt.bindLong(17, installTime);
        }
 
        String componentNameStr = entity.getComponentNameStr();
        if (componentNameStr != null) {
            stmt.bindString(18, componentNameStr);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(19, iconUrl);
        }
 
        Integer backgroundResID = entity.getBackgroundResID();
        if (backgroundResID != null) {
            stmt.bindLong(20, backgroundResID);
        }
 
        Integer inFolderIndex = entity.getInFolderIndex();
        if (inFolderIndex != null) {
            stmt.bindLong(21, inFolderIndex);
        }
 
        String reserve1 = entity.getReserve1();
        if (reserve1 != null) {
            stmt.bindString(22, reserve1);
        }
 
        String reserve2 = entity.getReserve2();
        if (reserve2 != null) {
            stmt.bindString(23, reserve2);
        }
 
        String reserve3 = entity.getReserve3();
        if (reserve3 != null) {
            stmt.bindString(24, reserve3);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ShortcutInfo readEntity(Cursor cursor, int offset) {
        ShortcutInfo entity = new ShortcutInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // index
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // spanX
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // spanY
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // row
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // column
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // width
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // height
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // title
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // description
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // packageName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // className
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // flags
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // container
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // containerName
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // installTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // componentNameStr
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // iconUrl
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // backgroundResID
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // inFolderIndex
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // reserve1
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // reserve2
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // reserve3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ShortcutInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndex(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSpanX(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSpanY(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRow(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setColumn(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setWidth(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setHeight(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDescription(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPackageName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setClassName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFlags(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setContainer(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setContainerName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setInstallTime(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setComponentNameStr(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIconUrl(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBackgroundResID(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setInFolderIndex(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setReserve1(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setReserve2(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setReserve3(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ShortcutInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ShortcutInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
